"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-05-23 13:43:32`."
scalar DateTime
    @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

"Indicates what fields are available at the top level of a query operation."
type Query {
    """
    Get a specific property by ID
    """
    property(id: ID! @eq): Property @find

    """
    Get all properties with filtering, pagination and sorting
    """
    properties(filter: PropertyFilterInput): PropertyPaginatorResult!
        @field(resolver: "App\\GraphQL\\Queries\\PropertiesQuery")
}

"Account of a person who utilizes this application."
type User {
    "Unique primary key."
    id: ID!

    "Non-unique name."
    name: String!

    "Unique email address."
    email: String!

    "When the email was verified."
    email_verified_at: DateTime

    "When the account was created."
    created_at: DateTime!

    "When the account was last updated."
    updated_at: DateTime!
}

"""
A Location represents a geographical area where properties are located
"""
type Location {
    id: ID!
    full_name: String!
    zipcode: String
    province: String
    sub_district: String
    district: String
    properties: [Property!]! @hasMany
}

"""
A PropertyType represents the category of a property
"""
type PropertyType {
    id: ID!
    name: String!
    properties: [Property!]! @hasMany
}

"""
A Property represents a real estate listing
"""
type Property {
    id: ID!
    title: String!
    description: String
    size_w: Float
    size_h: Float
    price: Int!
    date_listed: DateTime!
    created_at: DateTime!
    updated_at: DateTime!
    status: PropertyStatus!
    location: Location! @belongsTo
    propertyType: PropertyType! @belongsTo
    attributes: [PropertyAttribute!]! @hasMany
}

"""
A PropertyAttribute represents additional features of a property
"""
type PropertyAttribute {
    id: ID!
    property: Property! @belongsTo
    name: String!
    amount: Int!
}

"""
Available property statuses
"""
enum PropertyStatus {
    FORSALE @enum(value: "forsale")
    SOLD @enum(value: "sold")
}

"""
Available property types
"""
enum PropertyTypeEnum {
    HOME @enum(value: "home")
    CONDO @enum(value: "condo")
    TOWNHOUSE @enum(value: "townhouse")
    LAND @enum(value: "land")
    SHOPHOUSE @enum(value: "shophouse")
    OFFICE @enum(value: "office")
    APARTMENT @enum(value: "apartment")
    HOTEL @enum(value: "hotel")
}

"""
Available property attributes
"""
enum PropertyAttributeEnum {
    AIRCONDITIONER @enum(value: "airconditioner")
    WARDROBEROOM @enum(value: "wardroberoom")
    LIFT @enum(value: "lift")
    PARKING @enum(value: "parking")
    FITNESS @enum(value: "fitness")
    JAGUCCI @enum(value: "jagucci")
    SWIMMINGPOOL @enum(value: "swimmingpool")
    PARK_AREA @enum(value: "park area")
    CCTV @enum(value: "cctv")
    SHUTTLE_SERVICE @enum(value: "shuttle service")
}

# Add these input types at the top level
input PropertyFilterInput {
    search: String
    page: Int = 1
    limit: Int = 12
    sortKey: PropertySortKey = CREATED_AT
    sortOrder: SortOrder = DESC
    province: String
}

enum PropertySortKey {
    TITLE
    PRICE
    DATE_LISTED
    CREATED_AT
}

enum SortOrder {
    ASC
    DESC
}

# Add the paginator result type
type PropertyPaginatorResult {
    data: [Property!]!
    paginatorInfo: PaginatorInfo!
}

type PaginatorInfo {
    count: Int!
    currentPage: Int!
    firstItem: Int
    hasMorePages: Boolean!
    lastItem: Int
    lastPage: Int!
    perPage: Int!
    total: Int!
}
